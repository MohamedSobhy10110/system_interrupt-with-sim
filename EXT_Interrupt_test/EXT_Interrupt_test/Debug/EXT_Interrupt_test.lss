
EXT_Interrupt_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000112  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000192  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ac  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000ae  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001dc  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:

#include "EX_Inter_Header.h"
#include <avr/interrupt.h>

ISR(INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
TOGGEL_BIT(PORTA,2);//motor
  8a:	9b b3       	in	r25, 0x1b	; 27
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	89 27       	eor	r24, r25
  90:	8b bb       	out	0x1b, r24	; 27
}
  92:	9f 91       	pop	r25
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <__vector_2>:

ISR(INT1_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
TOGGEL_BIT(PORTA,7);
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	80 58       	subi	r24, 0x80	; 128
  b0:	8b bb       	out	0x1b, r24	; 27
REST_BIT(PORTA,6);//led
  b2:	de 98       	cbi	0x1b, 6	; 27
}
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <INT0_Init>:

void INT0_Init(void)
{
	SREG_EXinTrup |=(1<<I_BIT);                            // Enable GENERAL INTERRUPT bit  
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8f bf       	out	0x3f, r24	; 63
	
	GICR_EXinTrup |= (1<<INT0_BIT);                       // Enable External INTERRUPT bit INT0
  c6:	8b b7       	in	r24, 0x3b	; 59
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	8b bf       	out	0x3b, r24	; 59
	
	PORTA &=(~(1<<2));                                // configure output as negative resistance   
  cc:	da 98       	cbi	0x1b, 2	; 27
	
	MCUCR_EXinTrup |=((1<<ISC01_BIT) |(1<<ISC00_BIT));    //configure trigger bit level 
  ce:	85 b7       	in	r24, 0x35	; 53
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	85 bf       	out	0x35, r24	; 53
	
	GIFR_EXinTrup |=(1<<INTF0_BIT);                       // configure INTERRUPT bit flag for INTO
  d4:	8a b7       	in	r24, 0x3a	; 58
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	8a bf       	out	0x3a, r24	; 58
  da:	08 95       	ret

000000dc <INT1_Init>:

}

void INT1_Init(void)
{
	SREG_EXinTrup |=(1<<I_BIT);                     // Enable GENERAL INTERRUPT bit  
  dc:	8f b7       	in	r24, 0x3f	; 63
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8f bf       	out	0x3f, r24	; 63
	
	GICR_EXinTrup |= (1<<INT1_BIT);                        // Enable External INTERRUPT bit INT1
  e2:	8b b7       	in	r24, 0x3b	; 59
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8b bf       	out	0x3b, r24	; 59
	
	PORTA &=(~(1<<7));                                  //configure output as negative resistance
  e8:	df 98       	cbi	0x1b, 7	; 27
	PORTA &=(~(1<<6));
  ea:	de 98       	cbi	0x1b, 6	; 27
	MCUCR_EXinTrup|=((1<<ISC10_BIT) |(1<<ISC11_BIT));      //configure trigger bit level
  ec:	85 b7       	in	r24, 0x35	; 53
  ee:	8c 60       	ori	r24, 0x0C	; 12
  f0:	85 bf       	out	0x35, r24	; 53
	
	GIFR_EXinTrup |=(1<<INTF1_BIT);                          // configure INTERRUPT bit flag for INT1
  f2:	8a b7       	in	r24, 0x3a	; 58
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	8a bf       	out	0x3a, r24	; 58
  f8:	08 95       	ret

000000fa <main>:


}
int main(void)
{
	INT1_Init(); 
  fa:	0e 94 6e 00 	call	0xdc	; 0xdc <INT1_Init>
	INT0_Init();
  fe:	0e 94 60 00 	call	0xc0	; 0xc0 <INT0_Init>
	
	REST_BIT(DDRD,2);
 102:	8a 98       	cbi	0x11, 2	; 17
	REST_BIT(DDRD,3);
 104:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(DDRA,2);
 106:	d2 9a       	sbi	0x1a, 2	; 26
	SET_BIT(DDRA,7);
 108:	d7 9a       	sbi	0x1a, 7	; 26
	SET_BIT(DDRA,6);
 10a:	d6 9a       	sbi	0x1a, 6	; 26
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x12>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
